version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - api
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=https://vahfanforever.com/spotify-connector/api
    networks:
      - app-network
    depends_on:
      api:
        condition: service_healthy

  api:
    container_name: api 
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIRECT_URI=https://vahfanforever.com/spotify-connector/api/v1/callback
      - CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  queue_manager:
    build:
      context: ./queue_manager
      dockerfile: Dockerfile
    environment:
      - API_BASE_URL=http://api:8000/api/v1
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:13
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network

volumes:
  postgres_data:
    name: spotify_queue_postgres_data

networks:
  app-network:
    name: spotify_queue_network